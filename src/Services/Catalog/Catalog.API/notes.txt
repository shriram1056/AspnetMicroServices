STRUCTURE:

settings related to url and launch are in Properties/launchSettings.json

add package by right clicking Depenencies and selecting "Add nuget"

get values in appsettings.json by configuration.GetValue<string>("DatabaseSettings:DatabaseName")


PACKAGES:

MongoDB.Driver


MONGODB:

right click "solution" and click "open in terminal"

docker pull mongo

docker run -d -p 27017:27017 --name shopping-mongo mongo		// create a container and continue using the terminal or shell without being attached to the container's console.

docker run -d -p local_port:image_port

docker ps								// list all running container

docker logs -f shopping-mongo

docker exec -it shopping-mongo command		//  this runs a single command inside the container. each container is a seperate os with linux file system. -i is for providing inputs to the shell in container. -t is emulating a terminal functionalities. 

docker exec -it shopping-mongo /bin/bash	// run the bash executable in /bin to open terminal

mongosh			// goes to mongo-cli

show dbs/databases		// list dbs

show collections		// show collections in the current Db

use database			// switch to this database

db.createCollection('Products')  // create Products collection

db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])

db.Products.find({}).pretty()    // find all with no filter and display in json format

db.Products.remove({})			// remove all

[BsonId]    // the field is Id field

[BsonRepresentation(BsonType.ObjectId)]   // generate r value on insert

[BsonElement("Name")]     // name of field in MONGO


CONTROLLER:

The [controller] token in the [Route] attribute gets the name of the class by convention-based routing in ASP.NET. When the attribute is applied to a controller class, ASP.NET automatically replaces [controller] with the name of the controller class, but with the "Controller" suffix removed.

By specifying ILogger<CatalogController>, you are indicating that you want to inject an instance of a logger specifically for the CatalogController class.

ActionResult is a base class for the return types of action methods. we use it in the controller to represent the result of an action method execution and encapsulates the data that will be sent back as the HTTP response from the server to the client.

Using ProducesResponseType attribute with typeof(IEnumerable<Product>) provides documentation for the consumers of your API, informing them about the expected response type. 

IEnumerable<Product> is a compile-time construct used for type checking, variable declarations, method signatures, and other static aspects of your code.

By using the typeof operator, we get a Type object containing metadata and information about the type at runtime.

Name attribute in HttpMethod specifies the name of the route. By providing a name, you can refer to this specific route by name elsewhere in your code. For example, it can be useful when generating URLs or performing route-based operations.

If there are multiple http methods then Routes need to be used to specify multiple endpoints.

The [FromBody] is only needed if you're doing an MVC controller. The FromBody attribute is used to bind data from the request body to action method parameters. normally, for post request the data is sent through the body.



PROGRAM.cs:

When a service is registered with the AddScoped method, a new instance of that service is created once per client request within the scope. 


C#:

A nameof function produces the name of a variable, type, or member as the string constant
