version: '3.4'

services:
  catalogdb:
    container_name: catalogdb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
 
  basketdb:
    container_name: basketdb
    restart: always
    ports:
      - "6379:6379"

  discountdb:
    container_name: discountdb
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin1234
      - POSTGRES_DB=DiscountDb
    restart: always
    ports:
        - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/ 
 
  catalog.api:
    container_name: catalog.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings__ConnectionString=mongodb://catalogdb:27017"
    depends_on:
      - catalogdb
    ports:
      - "8000:80"
  # the MongoDB client driver will use the default port for MongoDB, which is 27017.

  basket.api:
    container_name: basket.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings__ConnectionString=basketdb:6379"
      - "GrpcSettings:DiscountUrl=http://discount.grpc"
    depends_on:
      - basketdb
    ports:
      - "8001:80"
  
  discount.api:
    container_name: discount.api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings__ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
    depends_on:
      - discountdb
    ports:
      - "8002:80"
 
  discount.grpc:
    container_name: discount.grpc
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - "DatabaseSettings:ConnectionString=Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=admin1234;"
    depends_on:
      - discountdb
    ports:
      - "8003:80"

  portainer:
    container_name: portainer
    restart: always
    ports:
      - "8080:8000"
      - "9000:9443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data

  pgadmin:
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@aspnetrun.com
      - PGADMIN_DEFAULT_PASSWORD=admin1234
    restart: always
    ports:
        - "5050:80"
    volumes:
      - pgadmin_data:/root/.pgadmin
 
 # PGADMIN_ENABLE_TLS: If left un-set, the container will listen on port 80 for connections in plain text.

# restart: the container will be automatically restarted if it stops or exits, regardless of the exit status

# depends_on: When one service depends on another service using depends_on, Docker Compose ensures that the dependencies are started before the dependent services.

# environment: When you specify environment variables in the Docker Compose file or when running a Docker container, those environment variables take precedence over the corresponding values specified in appsettings.json.

# ConnectionString: mongodb://host:port, use mongodb protocol and by default no users created. A host name is something that is assigned by a network administrator and, if on the public internet, gets registered and is eventually stored in DNS servers. The IP address can change depending on the type of network. If a public IP address is assigned and then is changed that change is then propagated to the DNS servers to associate the new IP address with the host name using routing protocols. Web browsers interact through Internet Protocol (IP) addresses. DNS translates domain names to IP addresses so browsers can load Internet resources. Localhost is the hostname or the computer that is currently in use to run a program, in which the computer has the role as a virtual server. Docker provides a built-in DNS resolution mechanism that allows containers to communicate with each other using container names as hostnames.

#dotnet publish automatically does everything dotnet build already does

#All you really need to understand to be able to successfully publish and deploy is that you need to dotnet publish

#an app host refers to a small native executable that acts as the entry point for running .NET applications, we don't need that because it bloats and we run the .dll directly because of the .net runtime in the container.

#Final Stage: Typically, the last build stage is used as the final stage, where you include only the necessary artifacts required to run your application. This final stage often uses a lightweight base image, such as an official runtime image, to minimize the image size and remove unnecessary build dependencies.

#Discarding Intermediary Stages: The intermediate stages created during the build process are discarded after their artifacts have been copied into subsequent stages. This means that only the final stage artifacts remain in the resulting Docker image, reducing the overall size.
