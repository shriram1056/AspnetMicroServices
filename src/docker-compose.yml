version: '3.4'

services:
  catalog.api:
    image: ${DOCKER_REGISTRY-}catalogapi
    build:
      context: .
      dockerfile: Services/Catalog/Catalog.API/Dockerfile

  basket.api:
    image: ${DOCKER_REGISTRY-}basketapi
    build:
      context: .
      dockerfile: Services/Basket/Basket.API/Dockerfile
  
  catalogdb:
    image: mongo

  discountdb:
    image: postgres

  pgadmin:
    image: dpage/pgadmin4

  basketdb:
    image: redis:alpine  
    # alpine is lightweight

  orderdb:
    image: mcr.microsoft.com/mssql/server:2022-latest
  
  portainer:
    image: portainer/portainer-ce


  discount.api:
    image: ${DOCKER_REGISTRY-}discountapi
    build:
      context: .
      dockerfile: Services/Discount/Discount.API/Dockerfile

  discount.grpc:
    image: ${DOCKER_REGISTRY-}discountgrpc
    build:
      context: .
      dockerfile: Services/Discount/Discount.Grpc/Dockerfile

volumes:
  mongo_data:
  portainer_data:
  postgres_data:
  pgadmin_data:

  
# context: defines either a path to a directory containing a Dockerfile, or a URL to a git repository. When the value supplied is a relative path, it MUST be interpreted as relative to the location of the Compose file. 

# In this case, '.' is a relative path representing the current directory where you run docker-compose command and and where Compose can find a Dockerfile and docker-compose.yaml. The Dockerfile can also be elsewhere using the dockerfile keyword 

# DOCKER-REGISTRY can be set in environment variable of the image in docker-compose.override.yml. if not set then, the name is just the string after ${DOCKER_REGISTRY-}

# container name is different from image name


